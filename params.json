{"name":"PHP sudoku solver","tagline":"A Sudoku solver and generator implemented in PHP","body":"PHP Sudoku Solver\r\n=================\r\n\r\nA sudoku solver implemented in PHP. It uses a bruteforce back-tracking algorithim. This is a v1.0 of program.\r\n\r\n\r\nHow to Use\r\n==========\r\n\r\nThe package consists of two main classes, a solver, `SudokuSolver`, and a genrator, `SudokuGenerator`. \r\n\r\n\r\n##### Using Solver\r\n\r\nTo use this, you can initialize the SudokuSolver with a long string of numbers where 0 means an empty value. Calling `solve()` on object will try to solve the Sudoku by Backtracking algorithim. If it cannot be solved, `SudokuSolver::NOT_SOLVABLE` is returned.\r\n\r\n```php\r\ninclude \"SudokuSolver.php\";\r\n$sudoku = new SudokuSolver(\"103000509002109400000704000300502006060000050700803004000401000009205800804000107\");\r\n$sudoku->Solve();\r\n\r\nprint $sudoku->OutputString();\r\n```\r\n\r\n##### Using Generator\r\n\r\nThe generator works by filling the sudoku with random values till it is uniquely solvable. Three constants `METRIC_EASY`, `METRIC_MEDIUM`, `METRIC_HARD` can be used to construct sudoku which do nothing fancy except changing the number of filled values. \r\n\r\n```php\r\ninclude \"SudokuGenerator.php\";\r\n$sudoku = new SudokuGenerator();\r\n$sudoku->GenerateSudoku( SudokuGenerator::METRIC_EASY );\r\n\r\nprint $sudoku->OutputString();\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}